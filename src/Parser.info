-----------------------------------------------------------------------------
Info file generated by Happy Version 1.20.1.1 from Parser.y
-----------------------------------------------------------------------------


terminal string is unused
terminal if is unused
terminal else is unused
terminal auto is unused
terminal break is unused
terminal case is unused
terminal char is unused
terminal const is unused
terminal continue is unused
terminal default is unused
terminal do is unused
terminal double is unused
terminal enum is unused
terminal extern is unused
terminal float is unused
terminal for is unused
terminal int is unused
terminal long is unused
terminal register is unused
terminal return is unused
terminal short is unused
terminal signed is unused
terminal sizeof is unused
terminal static is unused
terminal struct is unused
terminal switch is unused
terminal typedef is unused
terminal union is unused
terminal unsigned is unused
terminal void is unused
terminal volatile is unused
terminal while is unused
terminal '-' is unused
terminal '/' is unused
terminal '&&' is unused
terminal '||' is unused
terminal 'sizeof' is unused
terminal '%' is unused
terminal '=' is unused
terminal '==' is unused
terminal '!=' is unused
terminal '!' is unused
terminal '<' is unused
terminal '<=' is unused
terminal '>' is unused
terminal '>=' is unused
terminal '~' is unused
terminal '|' is unused
terminal '(' is unused
terminal ')' is unused
terminal '[' is unused
terminal ']' is unused
terminal '.' is unused
terminal ':' is unused
terminal '->' is unused
terminal '<<' is unused
terminal '>>' is unused
terminal '^' is unused
terminal '?' is unused
terminal '*=' is unused
terminal '%=' is unused
terminal '+=' is unused
terminal '-=' is unused
terminal '<<=' is unused
terminal '>>=' is unused
terminal '&=' is unused
terminal '|=' is unused
terminal '^=' is unused
terminal ',' is unused
terminal '#' is unused
terminal '##' is unused
terminal '{' is unused
terminal '}' is unused
terminal ';' is unused
terminal '...' is unused

-----------------------------------------------------------------------------
Grammar
-----------------------------------------------------------------------------
	%start_clang -> expr                               (0)
	variable -> identifier                             (1)
	unary -> '++' expr                                 (2)
	unary -> expr '++'                                 (3)
	unary -> '--' expr                                 (4)
	unary -> expr '--'                                 (5)
	unary -> '&' expr                                  (6)
	unary -> '*' expr                                  (7)
	unary -> '+' expr                                  (8)
	binary -> expr '+' expr                            (9)
	binary -> expr '*' expr                            (10)
	expr -> variable                                   (11)
	expr -> integer_const                              (12)
	expr -> float_const                                (13)
	expr -> char_const                                 (14)
	expr -> binary                                     (15)
	expr -> unary                                      (16)

-----------------------------------------------------------------------------
Terminals
-----------------------------------------------------------------------------
	identifier     { L.RangedToken (L.Identifier _) _ }
	string         { L.RangedToken (L.StringLit _) _ }
	integer_const  { L.RangedToken (L.IntConst _) _ }
	float_const    { L.RangedToken (L.FloatConst _) _ }
	char_const     { L.RangedToken (L.CharConst _) _ }
	if             { L.RangedToken L.If _ }
	else           { L.RangedToken L.Else _ }
	auto           { L.RangedToken L.Auto _ }
	break          { L.RangedToken L.Break _ }
	case           { L.RangedToken L.Case _ }
	char           { L.RangedToken L.Char _ }
	const          { L.RangedToken L.Const _ }
	continue       { L.RangedToken L.Continue _ }
	default        { L.RangedToken L.Default _ }
	do             { L.RangedToken L.Do _ }
	double         { L.RangedToken L.Double _ }
	enum           { L.RangedToken L.Enum _ }
	extern         { L.RangedToken L.Extern _ }
	float          { L.RangedToken L.Float _ }
	for            { L.RangedToken L.For _ }
	int            { L.RangedToken L.Int _ }
	long           { L.RangedToken L.Long _ }
	register       { L.RangedToken L.Register _ }
	return         { L.RangedToken L.Return _ }
	short          { L.RangedToken L.Short _ }
	signed         { L.RangedToken L.Signed _ }
	sizeof         { L.RangedToken L.Sizeof _ }
	static         { L.RangedToken L.Static _ }
	struct         { L.RangedToken L.Struct _ }
	switch         { L.RangedToken L.Switch _ }
	typedef        { L.RangedToken L.Typedef _ }
	union          { L.RangedToken L.Union _ }
	unsigned       { L.RangedToken L.Unsigned _ }
	void           { L.RangedToken L.Void _ }
	volatile       { L.RangedToken L.Volatile _ }
	while          { L.RangedToken L.While _ }
	'+'            { L.RangedToken L.Plus _ }
	'-'            { L.RangedToken L.Minus _ }
	'*'            { L.RangedToken L.Times _ }
	'/'            { L.RangedToken L.Div _ }
	'++'           { L.RangedToken L.Inc _ }
	'--'           { L.RangedToken L.Dec _ }
	'&&'           { L.RangedToken L.LAnd _ }
	'||'           { L.RangedToken L.LOr _ }
	'sizeof'       { L.RangedToken L.SizeOfOp _ }
	'%'            { L.RangedToken L.Mod _ }
	'='            { L.RangedToken L.AEq _ }
	'=='           { L.RangedToken L.Eq _ }
	'!='           { L.RangedToken L.NotEq _ }
	'!'            { L.RangedToken L.Bang _ }
	'<'            { L.RangedToken L.Le _ }
	'<='           { L.RangedToken L.LEq _ }
	'>'            { L.RangedToken L.Gr _ }
	'>='           { L.RangedToken L.GEq _ }
	'~'            { L.RangedToken L.Complement _ }
	'&'            { L.RangedToken L.Amp _ }
	'|'            { L.RangedToken L.Or _ }
	'('            { L.RangedToken L.LParen _ }
	')'            { L.RangedToken L.RParen _ }
	'['            { L.RangedToken L.LBracket _ }
	']'            { L.RangedToken L.RBracket _ }
	'.'            { L.RangedToken L.Dot _ }
	':'            { L.RangedToken L.Colon _ }
	'->'           { L.RangedToken L.Arrow _ }
	'<<'           { L.RangedToken L.LShift _ }
	'>>'           { L.RangedToken L.RShift _ }
	'^'            { L.RangedToken L.Xor _ }
	'?'            { L.RangedToken L.QMark _ }
	'*='           { L.RangedToken L.TimesEq _ }
	'%='           { L.RangedToken L.DivEq _ }
	'+='           { L.RangedToken L.PlusEq _ }
	'-='           { L.RangedToken L.MinusEq _ }
	'<<='          { L.RangedToken L.LShiftEq _ }
	'>>='          { L.RangedToken L.RShiftEq _ }
	'&='           { L.RangedToken L.AndEq _ }
	'|='           { L.RangedToken L.OrEq _ }
	'^='           { L.RangedToken L.XorEq _ }
	','            { L.RangedToken L.Comma _ }
	'#'            { L.RangedToken L.Pnd _ }
	'##'           { L.RangedToken L.DblPnd _ }
	'{'            { L.RangedToken L.LBrace _ }
	'}'            { L.RangedToken L.RBrace _ }
	';'            { L.RangedToken L.SemiColon _ }
	'...'          { L.RangedToken L.Ellipsis _ }

-----------------------------------------------------------------------------
Non-terminals
-----------------------------------------------------------------------------
	%start_clang    rule  0
	variable        rule  1
	unary           rules 2, 3, 4, 5, 6, 7, 8
	binary          rules 9, 10
	expr            rules 11, 12, 13, 14, 15, 16

-----------------------------------------------------------------------------
States
-----------------------------------------------------------------------------
State 0

	%start_clang -> . expr                              (rule 0)

	identifier     shift, and enter state 2
	integer_const  shift, and enter state 7
	float_const    shift, and enter state 8
	char_const     shift, and enter state 9
	'+'            shift, and enter state 10
	'*'            shift, and enter state 11
	'++'           shift, and enter state 12
	'--'           shift, and enter state 13
	'&'            shift, and enter state 14

	variable       goto state 3
	unary          goto state 4
	binary         goto state 5
	expr           goto state 6

State 1

	variable -> . identifier                            (rule 1)

	identifier     shift, and enter state 2


State 2

	variable -> identifier .                            (rule 1)

	'+'            reduce using rule 1
	'*'            reduce using rule 1
	'++'           reduce using rule 1
	'--'           reduce using rule 1
	%eof           reduce using rule 1


State 3

	expr -> variable .                                  (rule 11)

	'+'            reduce using rule 11
	'*'            reduce using rule 11
	'++'           reduce using rule 11
	'--'           reduce using rule 11
	%eof           reduce using rule 11


State 4

	expr -> unary .                                     (rule 16)

	'+'            reduce using rule 16
	'*'            reduce using rule 16
	'++'           reduce using rule 16
	'--'           reduce using rule 16
	%eof           reduce using rule 16


State 5

	expr -> binary .                                    (rule 15)

	'+'            reduce using rule 15
	'*'            reduce using rule 15
	'++'           reduce using rule 15
	'--'           reduce using rule 15
	%eof           reduce using rule 15


State 6

	%start_clang -> expr .                              (rule 0)
	unary -> expr . '++'                                (rule 3)
	unary -> expr . '--'                                (rule 5)
	binary -> expr . '+' expr                           (rule 9)
	binary -> expr . '*' expr                           (rule 10)

	'+'            shift, and enter state 20
	'*'            shift, and enter state 21
	'++'           shift, and enter state 22
	'--'           shift, and enter state 23
	%eof           accept


State 7

	expr -> integer_const .                             (rule 12)

	'+'            reduce using rule 12
	'*'            reduce using rule 12
	'++'           reduce using rule 12
	'--'           reduce using rule 12
	%eof           reduce using rule 12


State 8

	expr -> float_const .                               (rule 13)

	'+'            reduce using rule 13
	'*'            reduce using rule 13
	'++'           reduce using rule 13
	'--'           reduce using rule 13
	%eof           reduce using rule 13


State 9

	expr -> char_const .                                (rule 14)

	'+'            reduce using rule 14
	'*'            reduce using rule 14
	'++'           reduce using rule 14
	'--'           reduce using rule 14
	%eof           reduce using rule 14


State 10

	unary -> '+' . expr                                 (rule 8)

	identifier     shift, and enter state 2
	integer_const  shift, and enter state 7
	float_const    shift, and enter state 8
	char_const     shift, and enter state 9
	'+'            shift, and enter state 10
	'*'            shift, and enter state 11
	'++'           shift, and enter state 12
	'--'           shift, and enter state 13
	'&'            shift, and enter state 14

	variable       goto state 3
	unary          goto state 4
	binary         goto state 5
	expr           goto state 19

State 11

	unary -> '*' . expr                                 (rule 7)

	identifier     shift, and enter state 2
	integer_const  shift, and enter state 7
	float_const    shift, and enter state 8
	char_const     shift, and enter state 9
	'+'            shift, and enter state 10
	'*'            shift, and enter state 11
	'++'           shift, and enter state 12
	'--'           shift, and enter state 13
	'&'            shift, and enter state 14

	variable       goto state 3
	unary          goto state 4
	binary         goto state 5
	expr           goto state 18

State 12

	unary -> '++' . expr                                (rule 2)

	identifier     shift, and enter state 2
	integer_const  shift, and enter state 7
	float_const    shift, and enter state 8
	char_const     shift, and enter state 9
	'+'            shift, and enter state 10
	'*'            shift, and enter state 11
	'++'           shift, and enter state 12
	'--'           shift, and enter state 13
	'&'            shift, and enter state 14

	variable       goto state 3
	unary          goto state 4
	binary         goto state 5
	expr           goto state 17

State 13

	unary -> '--' . expr                                (rule 4)

	identifier     shift, and enter state 2
	integer_const  shift, and enter state 7
	float_const    shift, and enter state 8
	char_const     shift, and enter state 9
	'+'            shift, and enter state 10
	'*'            shift, and enter state 11
	'++'           shift, and enter state 12
	'--'           shift, and enter state 13
	'&'            shift, and enter state 14

	variable       goto state 3
	unary          goto state 4
	binary         goto state 5
	expr           goto state 16

State 14

	unary -> '&' . expr                                 (rule 6)

	identifier     shift, and enter state 2
	integer_const  shift, and enter state 7
	float_const    shift, and enter state 8
	char_const     shift, and enter state 9
	'+'            shift, and enter state 10
	'*'            shift, and enter state 11
	'++'           shift, and enter state 12
	'--'           shift, and enter state 13
	'&'            shift, and enter state 14

	variable       goto state 3
	unary          goto state 4
	binary         goto state 5
	expr           goto state 15

State 15

	unary -> expr . '++'                                (rule 3)
	unary -> expr . '--'                                (rule 5)
	unary -> '&' expr .                                 (rule 6)
	binary -> expr . '+' expr                           (rule 9)
	binary -> expr . '*' expr                           (rule 10)

	'+'            reduce using rule 6
	'*'            reduce using rule 6
	'++'           reduce using rule 6
	'--'           reduce using rule 6
	%eof           reduce using rule 6


State 16

	unary -> expr . '++'                                (rule 3)
	unary -> '--' expr .                                (rule 4)
	unary -> expr . '--'                                (rule 5)
	binary -> expr . '+' expr                           (rule 9)
	binary -> expr . '*' expr                           (rule 10)

	'+'            reduce using rule 4
	'*'            reduce using rule 4
	'++'           reduce using rule 4
	'--'           reduce using rule 4
	%eof           reduce using rule 4


State 17

	unary -> '++' expr .                                (rule 2)
	unary -> expr . '++'                                (rule 3)
	unary -> expr . '--'                                (rule 5)
	binary -> expr . '+' expr                           (rule 9)
	binary -> expr . '*' expr                           (rule 10)

	'+'            reduce using rule 2
	'*'            reduce using rule 2
	'++'           reduce using rule 2
	'--'           reduce using rule 2
	%eof           reduce using rule 2


State 18

	unary -> expr . '++'                                (rule 3)
	unary -> expr . '--'                                (rule 5)
	unary -> '*' expr .                                 (rule 7)
	binary -> expr . '+' expr                           (rule 9)
	binary -> expr . '*' expr                           (rule 10)

	'+'            reduce using rule 7
	'*'            reduce using rule 7
	'++'           shift, and enter state 22
	'--'           shift, and enter state 23
	%eof           reduce using rule 7


State 19

	unary -> expr . '++'                                (rule 3)
	unary -> expr . '--'                                (rule 5)
	unary -> '+' expr .                                 (rule 8)
	binary -> expr . '+' expr                           (rule 9)
	binary -> expr . '*' expr                           (rule 10)

	'+'            reduce using rule 8
	'*'            shift, and enter state 21
	'++'           shift, and enter state 22
	'--'           shift, and enter state 23
	%eof           reduce using rule 8


State 20

	binary -> expr '+' . expr                           (rule 9)

	identifier     shift, and enter state 2
	integer_const  shift, and enter state 7
	float_const    shift, and enter state 8
	char_const     shift, and enter state 9
	'+'            shift, and enter state 10
	'*'            shift, and enter state 11
	'++'           shift, and enter state 12
	'--'           shift, and enter state 13
	'&'            shift, and enter state 14

	variable       goto state 3
	unary          goto state 4
	binary         goto state 5
	expr           goto state 25

State 21

	binary -> expr '*' . expr                           (rule 10)

	identifier     shift, and enter state 2
	integer_const  shift, and enter state 7
	float_const    shift, and enter state 8
	char_const     shift, and enter state 9
	'+'            shift, and enter state 10
	'*'            shift, and enter state 11
	'++'           shift, and enter state 12
	'--'           shift, and enter state 13
	'&'            shift, and enter state 14

	variable       goto state 3
	unary          goto state 4
	binary         goto state 5
	expr           goto state 24

State 22

	unary -> expr '++' .                                (rule 3)

	'+'            reduce using rule 3
	'*'            reduce using rule 3
	'++'           reduce using rule 3
	'--'           reduce using rule 3
	%eof           reduce using rule 3


State 23

	unary -> expr '--' .                                (rule 5)

	'+'            reduce using rule 5
	'*'            reduce using rule 5
	'++'           reduce using rule 5
	'--'           reduce using rule 5
	%eof           reduce using rule 5


State 24

	unary -> expr . '++'                                (rule 3)
	unary -> expr . '--'                                (rule 5)
	binary -> expr . '+' expr                           (rule 9)
	binary -> expr . '*' expr                           (rule 10)
	binary -> expr '*' expr .                           (rule 10)

	'+'            reduce using rule 10
	'*'            reduce using rule 10
	'++'           shift, and enter state 22
	'--'           shift, and enter state 23
	%eof           reduce using rule 10


State 25

	unary -> expr . '++'                                (rule 3)
	unary -> expr . '--'                                (rule 5)
	binary -> expr . '+' expr                           (rule 9)
	binary -> expr '+' expr .                           (rule 9)
	binary -> expr . '*' expr                           (rule 10)

	'+'            reduce using rule 9
	'*'            shift, and enter state 21
	'++'           shift, and enter state 22
	'--'           shift, and enter state 23
	%eof           reduce using rule 9


-----------------------------------------------------------------------------
Grammar Totals
-----------------------------------------------------------------------------
Number of rules: 17
Number of terminals: 84
Number of non-terminals: 5
Number of states: 26
